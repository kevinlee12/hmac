{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["generateHmac","key","message","createHmac","update","digest","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hmac","handleChange","bind","assertThisInitialized","event","setState","defineProperty","target","name","value","updateHmac","_this$state","react_default","a","createElement","className","id","type","onChange","htmlFor","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.370cd69b.chunk.js","sourcesContent":["import React from 'react';\nimport { createHmac } from 'crypto';\n\nimport 'materialize-css/dist/css/materialize.min.css';\nimport 'materialize-css/dist/js/materialize';\n\ninterface AppState {\n  key: string,\n  hmac: string,\n  message: string\n}\n\nfunction generateHmac(key: string, message: string): string {\n  if (key === '' || message === '') {\n    return '';\n  }\n\n  const hmac = createHmac('sha512', key);\n  return hmac.update(message).digest('base64');\n}\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      key: '',\n      hmac: '',\n      message: ''\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n\n    this.setState({\n      [event.target.name]: event.target.value\n    } as Pick<AppState, 'key' | 'message'>);\n\n    this.updateHmac();\n  }\n\n  updateHmac() {\n    const { key, message } = this.state;\n\n    this.setState({\n      hmac: generateHmac(key, message)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>HMAC Generator</h1>\n        <div> Insert json below </div>\n        <div>\n          <div className=\"input-field\">\n            <input id=\"key\" type=\"text\" name=\"key\" value={this.state.key}\n                onChange={this.handleChange} />\n            <label htmlFor=\"key\">HMAC Key</label>\n          </div>\n\n          <div className=\"input-field\">\n            <textarea onChange={ this.handleChange } name=\"message\"\n              id=\"json-text\" className=\"materialize-textarea\"\n              value={this.state.message} />\n            <label htmlFor=\"json-text\">JSON Input</label>\n          </div>\n        </div>\n        <b> HMAC </b>\n        <div>\n          { this.state.hmac !== '' ? this.state.hmac : \"No valid input yet!\" }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}